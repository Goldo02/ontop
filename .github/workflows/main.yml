# Workflow for lightweight tests in Ontop

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push for all branches or pull request events but only for the version4/releasing branches
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - version4
      - releasing/**

jobs:
  run-postgresql:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # The java versions the job will run on
      matrix:
        jdk: [ 11 ]
        #jdk: [ 8, 11 ]

    services:
      pgsql:
        image: albulenpano/pgsql-lightweight:v2
        env:
          POSTGRES_PASSWORD: postgres2
        ports:
          - "7777:5432"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}

      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Run CI without docker tests
        run: ./mvnw install --fail-at-end
      # Runs all tests specific to a db engine
      - name: Run CI for docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="pgsqllighttests" -DskipTests=false --fail-at-end

  run-mssql:
    needs: run-postgresql
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # The java versions the job will run on
      matrix:
        jdk: [ 11 ]
        #jdk: [ 8, 11 ]

    services:
      mssql:
        image: albulenpano/mssql-lightweight:v2
        env:
          SA_PASSWORD: Mssql1.0
          ACCEPT_EULA: Y
        ports:
          - "1533:1433"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}

      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Run CI without docker tests
        run: ./mvnw install --fail-at-end
      # Runs all tests specific to a db engine
      - name: Run CI for docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="mssqllighttests" -DskipTests=false --fail-at-end

  run-mysql:
    needs: [run-postgresql, run-mssql]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # The java versions the job will run on
      matrix:
        jdk: [ 11 ]
        #jdk: [ 8, 11 ]

    services:
      mysql:
        image: albulenpano/mysql-lightweight:v2
        env:
          MYSQL_ROOT_PASSWORD: mysql
        ports:
          - "3694:3306"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}

      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Run CI without docker tests
        run: ./mvnw install --fail-at-end
      # Runs all tests specific to a db engine
      - name: Run CI for docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="mysqllighttests" -DskipTests=false --fail-at-end

  run-oracle:
    needs: [run-postgresql, run-mssql, run-mysql]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # The java versions the job will run on
      matrix:
        jdk: [ 11 ]
        #jdk: [ 8, 11 ]

    services:
      oracle:
        image: albulenpano/oracle-lightweight:v2
        env:
          ORACLE_PASSWORD: oracle
          LICENSE: accept
        ports:
          - "49160:8080"
          - "49161:1521"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}

      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Run CI without docker tests
        run: ./mvnw install --fail-at-end
      # Runs all tests specific to a db engine
      - name: Run CI for docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="oraclelighttests" -DskipTests=false --fail-at-end


  run-db2:
    needs: [run-postgresql, run-mssql, run-mysql, run-oracle]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # The java versions the job will run on
      matrix:
        jdk: [ 11 ]
        #jdk: [ 8, 11 ]

    services:
      db2:
        image: albulenpano/db2-lightweight:v2
        ports:
          - "50000:50000"
        env:
          DB2INSTANCE: db2inst1
          DB2INST1_PASSWORD: obda-pwd
          LICENSE: accept
        options: >-
          --privileged=true

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Set up the java versions
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: ${{ matrix.jdk }}

      - name: Set maven opts
        run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
      - name: Run CI without docker tests
        run: ./mvnw install --fail-at-end
      # Runs all tests specific to a db engine
      - name: Run CI for docker tests
        run: cd test/lightweight-tests && ../../mvnw install -Dgroups="db2lighttests" -DskipTests=false --fail-at-end